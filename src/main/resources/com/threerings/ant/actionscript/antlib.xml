<antlib>
  <macrodef name="requireflex"
      description="Fails unless it can find the flexsdk or unless flexsdk.dir is already set">
    <sequential>
      <if>
        <not><isset property="flexsdk.dir"/></not>
        <then>
          <!-- locate our flex sdk -->
          <property name="flex.version" value="4.1.0.16076"/>
          <condition property="flexsdk.prop" value="${env.FLEX_HOME}">
            <available file="${env.FLEX_HOME}/lib/compc.jar"/>
          </condition>
          <condition property="flexsdk.prop" value="../flex/flex_sdk_${flex.version}">
            <available file="../flex/flex_sdk_${flex.version}/lib/compc.jar"/>
          </condition>
          <condition property="flexsdk.prop" value="../OOOLIBS-FLEX/flex_sdk_${flex.version}">
            <available file="../OOOLIBS-FLEX/flex_sdk_${flex.version}/lib/compc.jar"/>
          </condition>
          <dirname property="parent.dir" file="../somefile.txt"/>
          <fail><condition><not><isset property="flexsdk.prop"/></not></condition>
            You must either pass -Dflexsdk.dir=somedir on the command line, define a
            FLEX_HOME environment variable, or make the Flex SDK available as
            ${parent.dir}/flex/flex_sdk_${flex.version}
          </fail>
          <!-- Absolutize the found directory into flexsdk.dir -->
          <property name="flexsdk.dir" location="${flexsdk.prop}"/>
        </then>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="amxmlc">
    <attribute name="srcdir"/>
    <attribute name="dest"/>
    <attribute name="main"/>
    <attribute name="id" default="${ant.project.name}"/>
    <attribute name="libpath" default=","/>
    <attribute name="stacktraces" default="true"/>
    <attribute name="static-lrsl" default="false"/>
    <attribute name="use-network" default="false"/>
    <attribute name="debug" default="true"/>
    <element name="xargs" implicit="true" optional="true"/>

    <sequential>
      <requireflex/>
      <maventaskdef groupId="com.threerings.ant" artifactId="javanailgun" version="1.0"/>
      <javanailgun ngdest="dist/@{id}.ng.sh" ngwrite="${ngwrite}" ngrun="${ngrun}"
          classpath="${flexsdk.dir}/lib/mxmlc.jar" classname="flex2.tools.Mxmlc"
          failonerror="true" fork="true" maxmemory="1024m">
        <jvmarg value="-Djava.awt.headless=true"/>
        <xargs/>
        <arg value="-static-link-runtime-shared-libraries=@{static-lrsl}"/>
        <arg value="+flexlib=${flexsdk.dir}/frameworks"/>
        <arg value="+configname=air"/>
        <arg value="-verbose-stacktraces=@{stacktraces}"/>
        <arg value="-use-network=@{use-network}"/>
        <arg value="-compiler.library-path+=@{libpath}"/>
        <arg value="-compiler.debug=@{debug}"/>
        <arg value="-compiler.accessible=false"/>
        <arg value="-compiler.incremental=false"/>
        <arg value="-compiler.omit-trace-statements=false"/>
        <arg value="-source-path+=@{srcdir}"/>
        <arg value="-output=@{dest}"/>
        <arg value="@{srcdir}/@{main}"/>
      </javanailgun>
    </sequential>
  </macrodef>

  <macrodef name="mxmlc">
    <attribute name="srcdir"/>
    <attribute name="dest"/>
    <attribute name="main"/>
    <attribute name="id" default="${ant.project.name}"/>
    <attribute name="libpath" default=","/>
    <attribute name="stacktraces" default="true"/>
    <attribute name="static-lrsl" default="false"/>
    <attribute name="use-network" default="false"/>
    <attribute name="debug" default="true"/>
    <element name="xargs" implicit="true" optional="true"/>
    <sequential>
      <requireflex/>
      <maventaskdef groupId="com.threerings.ant" artifactId="javanailgun" version="1.0"/>
      <javanailgun ngdest="dist/@{id}.ng.sh" ngwrite="${ngwrite}" ngrun="${ngrun}"
          classpath="${flexsdk.dir}/lib/mxmlc.jar" classname="flex2.tools.Mxmlc"
          failonerror="true" fork="true" maxmemory="1024m">
        <jvmarg value="-Djava.awt.headless=true"/>
        <xargs/>
        <arg value="-static-link-runtime-shared-libraries=@{static-lrsl}"/>
        <arg value="+flexlib=${flexsdk.dir}/frameworks"/>
        <arg value="-verbose-stacktraces=@{stacktraces}"/>
        <arg value="-use-network=@{use-network}"/>
        <arg value="-compiler.library-path+=@{libpath}"/>
        <arg value="-compiler.debug=@{debug}"/>
        <arg value="-compiler.accessible=false"/>
        <arg value="-compiler.incremental=false"/>
        <arg value="-compiler.omit-trace-statements=false"/>
        <arg value="-source-path+=@{srcdir}"/>
        <arg value="-output=@{dest}"/>
        <arg value="@{srcdir}/@{main}"/>
      </javanailgun>
    </sequential>
  </macrodef>

  <!-- Runs compc with Three Rings' default configuration.  If useng is set, nailgun is called
    instead of the compc jar-->
  <macrodef name="compc">
    <attribute name="srcdir"/>
    <attribute name="dest"/>
    <attribute name="id" default="${ant.project.name}"/>
    <attribute name="libpath" default=","/>
    <attribute name="debug" default="true"/>
    <element name="xargs" implicit="true" optional="true"/>

    <sequential>
      <requireflex/>
      <maventaskdef groupId="com.threerings.ant" artifactId="javanailgun" version="1.0"/>
      <javanailgun ngdest="dist/@{id}.ng.sh" ngwrite="${ngwrite}" ngrun="${ngrun}"
          classpath="${flexsdk.dir}/lib/compc.jar" classname="flex2.tools.Compc"
          failonerror="true" fork="true" maxmemory="1024m">
        <jvmarg value="-Djava.awt.headless=true"/>
        <xargs/>
        <arg value="+flexlib=${flexsdk.dir}/frameworks"/>
        <arg value="-compiler.external-library-path+=@{libpath}"/>
        <arg value="-compiler.source-path=@{srcdir}"/>
        <arg value="-compiler.debug=@{debug}"/>
        <arg value="-compiler.accessible=false"/>
        <arg value="-compiler.omit-trace-statements=false"/>
        <arg value="-include-sources=@{srcdir}"/>
        <arg value="-output=@{dest}"/>
      </javanailgun>
    </sequential>
  </macrodef>

  <macrodef name="asimports">
    <attribute name="srcdir" default="src/main/as" />
    <sequential>
      <mavendep id="asimports">
        <remoteRepository refid="ooo.maven.depends.repo"/>
        <dependency groupId="com.threerings.aspirin" artifactId="import_action" version="1.7-SNAPSHOT" type="py"/>
      </mavendep>
      <exec executable="python">
        <arg value="${com.threerings.aspirin:import_action:py}" />
        <arg value="@{srcdir}" />
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="asdoc">
    <attribute name="srcdir"/>
    <attribute name="destdir"/>
    <attribute name="libpath" default=","/>
    <element name="xargs" implicit="true" optional="true"/>
    <sequential>
      <requireflex/>
      <java classpath="${flexsdk.dir}/lib/asdoc.jar" classname="flex2.tools.ASDoc"
          failonerror="true" fork="true" maxmemory="1024m">
        <jvmarg value="-Djava.awt.headless=true"/>
        <jvmarg value="-Dsun.io.useCanonCashes=false"/>
        <jvmarg value="-Xbootclasspath/p:${flexsdk.dir}/asdoc/lib/xalan.jar"/>
        <xargs/>
        <arg value="+flexlib=${flexsdk.dir}/frameworks"/>
        <arg value="-compiler.external-library-path+=@{libpath}"/>
        <arg value="-compiler.source-path=@{srcdir}"/>
        <arg value="-doc-sources=@{srcdir}"/>
        <arg line="-templates-path ${flexsdk.dir}/asdoc/templates"/>
        <arg line="-output @{destdir}"/>
      </java>
    </sequential>
  </macrodef>
</antlib>

